#!/usr/bin/env python3
"""
Repository cleanup script
Removes unnecessary files and prepares repo for GitHub
"""

import os
import shutil
import glob
from pathlib import Path

def remove_files_and_dirs(patterns):
    """Remove files and directories matching patterns"""
    removed = []
    
    for pattern in patterns:
        matches = glob.glob(pattern, recursive=True)
        for match in matches:
            try:
                if os.path.isfile(match):
                    os.remove(match)
                    removed.append(f"File: {match}")
                elif os.path.isdir(match):
                    shutil.rmtree(match)
                    removed.append(f"Dir: {match}")
            except Exception as e:
                print(f"‚ùå Failed to remove {match}: {e}")
    
    return removed

def cleanup_repo():
    """Clean up repository for GitHub"""
    print("üßπ Cleaning up repository...")
    
    # Files and directories to remove
    cleanup_patterns = [
        # Python cache
        "**/__pycache__",
        "**/*.pyc",
        "**/*.pyo",
        "**/*.pyd",
        "**/.Python",
        "**/build",
        "**/develop-eggs",
        "**/dist",
        "**/downloads",
        "**/eggs",
        "**/.eggs",
        "**/lib",
        "**/lib64",
        "**/parts",
        "**/sdist",
        "**/var",
        "**/wheels",
        "**/*.egg-info",
        "**/.installed.cfg",
        "**/*.egg",
        "**/MANIFEST",
        
        # Jupyter
        "**/.ipynb_checkpoints",
        
        # Environment
        "**/.env",
        "**/.venv",
        "**/env",
        "**/venv",
        "**/ENV",
        "**/env.bak",
        "**/venv.bak",
        
        # IDE
        "**/.vscode",
        "**/.idea",
        "**/*.swp",
        "**/*.swo",
        "**/*~",
        
        # OS
        "**/.DS_Store",
        "**/.DS_Store?",
        "**/._*",
        "**/.Spotlight-V100",
        "**/.Trashes",
        "**/ehthumbs.db",
        "**/Thumbs.db",
        
        # Training outputs (keep structure but remove large files)
        "**/checkpoints",
        "**/logs",
        "**/runs",
        "**/wandb",
        "**/*.log",
        
        # Large model files (should use Git LFS)
        "**/*.safetensors",
        "**/chatterbox-project",
        "**/model.safetensors",
        "**/t3_cfg_vietnamese.safetensors",
        
        # Dataset files (too large for GitHub)
        "**/train.csv",
        "**/val.csv",
        "**/wavs",
        
        # Temporary files
        "**/temp",
        "**/tmp",
        "**/inference_output",
        "**/gradio_outputs",
        
        # Tokenizer intermediate files
        "**/vietnamese_text_corpus.txt",
        "**/tokenizer_vietnamese_new.json",
        
        # Specific temporary files
        "**/simple_test.py",
        "**/test_vietnamese_model.py",
        "**/fix_*.py",
        "**/create_model_config.py",
        "**/gradio_interface.py",
        "**/gradio_local.py",
        "**/gradio_tts_app.py",
        "**/inference_vietnamese_tts.py",
        "**/tokenizer_vi_expanded.json",
        "**/tokenizer_vietnamese.json",
        "**/vietnamese_text.txt",
        "**/beam_config.yaml",
        "**/finetune_t3_beam.py",
    ]
    
    # Remove files
    removed = remove_files_and_dirs(cleanup_patterns)
    
    # Create necessary directories
    directories_to_create = [
        "examples/outputs",
        "docs/images",
        "chatterbox/chatterbox-project",
    ]
    
    for directory in directories_to_create:
        os.makedirs(directory, exist_ok=True)
        print(f"‚úÖ Created directory: {directory}")
    
    # Create placeholder files for empty directories
    placeholder_files = [
        "examples/outputs/.gitkeep",
        "docs/images/.gitkeep",
        "chatterbox/chatterbox-project/.gitkeep",
    ]
    
    for placeholder in placeholder_files:
        with open(placeholder, 'w') as f:
            f.write("# This file keeps the directory in Git\n")
        print(f"‚úÖ Created placeholder: {placeholder}")
    
    print(f"\nüìä Cleanup Summary:")
    print(f"Removed {len(removed)} items:")
    for item in removed[:10]:  # Show first 10 items
        print(f"  - {item}")
    if len(removed) > 10:
        print(f"  ... and {len(removed) - 10} more items")
    
    print(f"\n‚úÖ Repository cleanup completed!")

def create_sample_files():
    """Create sample files for documentation"""
    print("\nüìù Creating sample files...")
    
    # Sample reference audio info
    sample_info = """# Sample Files

This directory contains sample files for testing and documentation.

## reference_voice.wav
- Duration: 5-7 seconds
- Format: WAV, 24kHz, mono
- Content: Clear Vietnamese speech
- Usage: Voice cloning reference

To use voice cloning examples, place your reference audio here as 'reference_voice.wav'.

## sample_texts.txt
Contains Vietnamese text samples for testing TTS functionality.
"""
    
    with open("examples/sample_info.md", 'w', encoding='utf-8') as f:
        f.write(sample_info)
    
    # Sample texts
    sample_texts = """Xin ch√†o, t√¥i l√† tr·ª£ l√Ω AI ti·∫øng Vi·ªát.
H√¥m nay l√† m·ªôt ng√†y ƒë·∫πp tr·ªùi.
C√¥ng ngh·ªá tr√≠ tu·ªá nh√¢n t·∫°o ƒëang ph√°t tri·ªÉn r·∫•t nhanh.
Vi·ªát Nam l√† m·ªôt ƒë·∫•t n∆∞·ªõc xinh ƒë·∫πp v·ªõi vƒÉn h√≥a phong ph√∫.
C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng h·ªá th·ªëng TTS ti·∫øng Vi·ªát.
Ch√∫c b·∫°n c√≥ m·ªôt ng√†y t·ªët l√†nh v√† nhi·ªÅu ni·ªÅm vui!
T√¥i c√≥ th·ªÉ n√≥i ti·∫øng Vi·ªát r·∫•t t·ª± nhi√™n v√† tr√¥i ch·∫£y.
H√£y th·ª≠ nghi·ªám v·ªõi nhi·ªÅu c√¢u kh√°c nhau ƒë·ªÉ test ch·∫•t l∆∞·ª£ng.
C√¥ng ngh·ªá voice cloning gi√∫p t·∫°o ra gi·ªçng n√≥i t·ª± nhi√™n.
H·ªá th·ªëng n√†y c√≥ th·ªÉ h·ªçc v√† b·∫Øt ch∆∞·ªõc gi·ªçng n√≥i c·ªßa b·∫°n."""
    
    with open("examples/sample_texts.txt", 'w', encoding='utf-8') as f:
        f.write(sample_texts)
    
    print("‚úÖ Sample files created")

def main():
    """Main cleanup function"""
    print("üáªüá≥ Vietnamese TTS Repository Cleanup")
    print("=" * 50)
    
    # Change to repository root
    repo_root = Path(__file__).parent
    os.chdir(repo_root)
    
    # Run cleanup
    cleanup_repo()
    create_sample_files()
    
    print(f"\nüéâ Repository is ready for GitHub!")
    print(f"\nüìã Next steps:")
    print(f"1. Review the cleaned repository")
    print(f"2. Update README.md with your GitHub username")
    print(f"3. Add your model files to Git LFS (if needed)")
    print(f"4. Commit and push to GitHub")
    print(f"\nüöÄ Git commands:")
    print(f"git add .")
    print(f"git commit -m 'Initial commit: Vietnamese TTS Voice Cloning'")
    print(f"git push origin main")

if __name__ == "__main__":
    main()
