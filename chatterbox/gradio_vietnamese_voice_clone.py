#!/usr/bin/env python3
"""
Vietnamese TTS Voice Cloning - Gradio Interface
Complete Gradio interface for Vietnamese TTS with voice cloning capabilities.
"""

import os
import json
import torch
import gradio as gr
import logging
import tempfile
import torchaudio
from pathlib import Path
from datetime import datetime

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Global variables
model = None
device = "cuda" if torch.cuda.is_available() else "cpu"

def load_vietnamese_model():
    """Load Vietnamese TTS model"""
    global model
    
    if model is not None:
        return model
    
    try:
        from chatterbox.tts import ChatterboxTTS
        
        # Load config
        config_path = "model_path_vietnamese.json"
        with open(config_path, 'r') as f:
            config = json.load(f)
        
        # Use trained model if available
        if os.path.exists("model.safetensors"):
            config["t3_path"] = "model.safetensors"
        
        # Convert to Path objects
        current_dir = Path.cwd()
        voice_encoder_path = current_dir / config["voice_encoder_path"]
        t3_path = current_dir / config["t3_path"]
        s3gen_path = current_dir / config["s3gen_path"]
        tokenizer_path = Path(config["tokenizer_path"])
        conds_path = current_dir / config["conds_path"] if config.get("conds_path") else None
        
        # Load model
        model = ChatterboxTTS.from_specified(
            voice_encoder_path=voice_encoder_path,
            t3_path=t3_path,
            s3gen_path=s3gen_path,
            tokenizer_path=tokenizer_path,
            conds_path=conds_path,
            device=device
        )
        
        logger.info("‚úÖ Vietnamese TTS model loaded successfully!")
        return model
        
    except Exception as e:
        logger.error(f"‚ùå Failed to load model: {e}")
        raise gr.Error(f"Failed to load Vietnamese TTS model: {e}")

def synthesize_with_voice_clone(text, reference_audio, exaggeration, temperature, cfg_weight):
    """
    Synthesize Vietnamese text with voice cloning
    
    Args:
        text: Vietnamese text to synthesize
        reference_audio: Reference audio file for voice cloning
        exaggeration: Emotion exaggeration (0.0-2.0)
        temperature: Sampling temperature (0.1-1.0)
        cfg_weight: CFG weight (0.0-1.0)
    
    Returns:
        tuple: (sample_rate, audio_array) for Gradio Audio component
    """
    try:
        # Load model if not loaded
        tts_model = load_vietnamese_model()
        
        # Validate inputs
        if not text.strip():
            raise gr.Error("Vui l√≤ng nh·∫≠p text ti·∫øng Vi·ªát!")
        
        if reference_audio is None:
            raise gr.Error("Vui l√≤ng upload file audio tham chi·∫øu!")
        
        # Generate audio with voice cloning
        logger.info(f"üé§ Synthesizing: '{text[:50]}...'")
        logger.info(f"üéµ Using reference audio: {reference_audio}")
        
        audio = tts_model.generate(
            text=text,
            audio_prompt_path=reference_audio,
            exaggeration=exaggeration,
            temperature=temperature,
            cfg_weight=cfg_weight
        )
        
        # Convert to numpy for Gradio
        if torch.is_tensor(audio):
            audio_np = audio.squeeze(0).cpu().numpy()
        else:
            audio_np = audio
        
        logger.info("‚úÖ Synthesis completed!")
        return (24000, audio_np)  # 24kHz sample rate
        
    except Exception as e:
        logger.error(f"‚ùå Synthesis failed: {e}")
        raise gr.Error(f"Synthesis failed: {e}")

def synthesize_default_voice(text, exaggeration, temperature, cfg_weight):
    """
    Synthesize Vietnamese text with default voice (no cloning)
    """
    try:
        # Load model if not loaded
        tts_model = load_vietnamese_model()
        
        # Validate inputs
        if not text.strip():
            raise gr.Error("Vui l√≤ng nh·∫≠p text ti·∫øng Vi·ªát!")
        
        # Generate audio with default voice
        logger.info(f"üé§ Synthesizing with default voice: '{text[:50]}...'")
        
        audio = tts_model.generate(
            text=text,
            exaggeration=exaggeration,
            temperature=temperature,
            cfg_weight=cfg_weight
        )
        
        # Convert to numpy for Gradio
        if torch.is_tensor(audio):
            audio_np = audio.squeeze(0).cpu().numpy()
        else:
            audio_np = audio
        
        logger.info("‚úÖ Synthesis completed!")
        return (24000, audio_np)
        
    except Exception as e:
        logger.error(f"‚ùå Synthesis failed: {e}")
        raise gr.Error(f"Synthesis failed: {e}")

def get_example_texts():
    """Get example Vietnamese texts"""
    return [
        "Xin ch√†o, t√¥i l√† tr·ª£ l√Ω AI ti·∫øng Vi·ªát.",
        "H√¥m nay l√† m·ªôt ng√†y ƒë·∫πp tr·ªùi.",
        "C√¥ng ngh·ªá tr√≠ tu·ªá nh√¢n t·∫°o ƒëang ph√°t tri·ªÉn r·∫•t nhanh.",
        "Vi·ªát Nam l√† m·ªôt ƒë·∫•t n∆∞·ªõc xinh ƒë·∫πp v·ªõi vƒÉn h√≥a phong ph√∫.",
        "C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng h·ªá th·ªëng TTS ti·∫øng Vi·ªát.",
        "Ch√∫c b·∫°n c√≥ m·ªôt ng√†y t·ªët l√†nh v√† nhi·ªÅu ni·ªÅm vui!",
        "T√¥i c√≥ th·ªÉ n√≥i ti·∫øng Vi·ªát r·∫•t t·ª± nhi√™n v√† tr√¥i ch·∫£y.",
        "H√£y th·ª≠ nghi·ªám v·ªõi nhi·ªÅu c√¢u kh√°c nhau ƒë·ªÉ test ch·∫•t l∆∞·ª£ng."
    ]

def process_batch_texts(batch_texts, reference_audio, progress=gr.Progress()):
    """
    Process multiple texts in batch

    Args:
        batch_texts: Multi-line text with one sentence per line
        reference_audio: Optional reference audio for voice cloning
        progress: Gradio progress tracker

    Returns:
        tuple: (zip_file_path, status_message)
    """
    try:
        # Load model
        tts_model = load_vietnamese_model()

        # Parse texts
        texts = [line.strip() for line in batch_texts.split('\n') if line.strip()]

        if not texts:
            return None, "‚ùå Kh√¥ng c√≥ text n√†o ƒë·ªÉ x·ª≠ l√Ω!"

        if len(texts) > 20:
            return None, "‚ùå T·ªëi ƒëa 20 c√¢u m·ªói l·∫ßn x·ª≠ l√Ω!"

        # Create temporary directory
        import zipfile
        temp_dir = tempfile.mkdtemp()
        zip_path = os.path.join(temp_dir, f"vietnamese_tts_batch_{datetime.now().strftime('%Y%m%d_%H%M%S')}.zip")

        status_messages = []
        successful = 0

        with zipfile.ZipFile(zip_path, 'w') as zipf:
            for i, text in enumerate(progress.tqdm(texts, desc="ƒêang x·ª≠ l√Ω...")):
                try:
                    # Generate audio
                    if reference_audio:
                        audio = tts_model.generate(
                            text=text,
                            audio_prompt_path=reference_audio,
                            exaggeration=0.5,
                            temperature=0.8,
                            cfg_weight=0.5
                        )
                    else:
                        audio = tts_model.generate(
                            text=text,
                            exaggeration=0.5,
                            temperature=0.8,
                            cfg_weight=0.5
                        )

                    # Save to temporary file
                    temp_audio_path = os.path.join(temp_dir, f"audio_{i+1:03d}.wav")
                    torchaudio.save(temp_audio_path, audio.cpu(), 24000)

                    # Add to zip with descriptive name
                    safe_text = "".join(c for c in text[:30] if c.isalnum() or c in (' ', '-', '_')).strip()
                    zip_filename = f"{i+1:03d}_{safe_text}.wav"
                    zipf.write(temp_audio_path, zip_filename)

                    status_messages.append(f"‚úÖ [{i+1}/{len(texts)}] {text[:50]}...")
                    successful += 1

                except Exception as e:
                    status_messages.append(f"‚ùå [{i+1}/{len(texts)}] L·ªói: {e}")

        # Create status message
        status = f"üéâ Ho√†n th√†nh: {successful}/{len(texts)} th√†nh c√¥ng\n\n" + "\n".join(status_messages)

        return zip_path, status

    except Exception as e:
        logger.error(f"‚ùå Batch processing failed: {e}")
        return None, f"‚ùå L·ªói x·ª≠ l√Ω batch: {e}"

# Create Gradio interface
def create_interface():
    """Create Gradio interface"""
    
    with gr.Blocks(
        title="Vietnamese TTS Voice Cloning",
        theme=gr.themes.Soft(),
        css="""
        .gradio-container {
            max-width: 1200px !important;
        }
        .main-header {
            text-align: center;
            background: linear-gradient(45deg, #FF6B6B, #4ECDC4);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            font-size: 2.5em;
            font-weight: bold;
            margin-bottom: 20px;
        }
        .section-header {
            background: linear-gradient(45deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            font-size: 1.5em;
            font-weight: bold;
            margin: 20px 0 10px 0;
        }
        """
    ) as demo:
        
        # Header
        gr.HTML("""
        <div class="main-header">
            üáªüá≥ Vietnamese TTS Voice Cloning üéµ
        </div>
        <div style="text-align: center; margin-bottom: 30px;">
            <p style="font-size: 1.2em; color: #666;">
                T·∫°o gi·ªçng n√≥i ti·∫øng Vi·ªát t·ª± nhi√™n v·ªõi c√¥ng ngh·ªá Voice Cloning
            </p>
        </div>
        """)
        
        with gr.Tabs():
            # Tab 1: Voice Cloning
            with gr.Tab("üé≠ Voice Cloning", elem_id="voice-clone-tab"):
                gr.HTML('<div class="section-header">üéµ Nh√¢n b·∫£n gi·ªçng n√≥i</div>')
                
                with gr.Row():
                    with gr.Column(scale=2):
                        text_input = gr.Textbox(
                            label="üìù Text ti·∫øng Vi·ªát",
                            placeholder="Nh·∫≠p text ti·∫øng Vi·ªát b·∫°n mu·ªën t·ªïng h·ª£p...",
                            lines=3,
                            max_lines=5
                        )
                        
                        reference_audio = gr.Audio(
                            label="üé§ Audio tham chi·∫øu (Voice ƒë·ªÉ clone)",
                            type="filepath",
                            format="wav"
                        )
                        
                        with gr.Row():
                            exaggeration_clone = gr.Slider(
                                minimum=0.0,
                                maximum=2.0,
                                value=0.5,
                                step=0.1,
                                label="üé≠ C∆∞·ªùng ƒë·ªô c·∫£m x√∫c"
                            )
                            temperature_clone = gr.Slider(
                                minimum=0.1,
                                maximum=1.0,
                                value=0.8,
                                step=0.1,
                                label="üå°Ô∏è Temperature"
                            )
                            cfg_weight_clone = gr.Slider(
                                minimum=0.0,
                                maximum=1.0,
                                value=0.5,
                                step=0.1,
                                label="‚öñÔ∏è CFG Weight"
                            )
                        
                        clone_btn = gr.Button(
                            "üéµ T·∫°o gi·ªçng n√≥i",
                            variant="primary",
                            size="lg"
                        )
                    
                    with gr.Column(scale=1):
                        clone_output = gr.Audio(
                            label="üîä K·∫øt qu·∫£ Voice Cloning",
                            type="numpy"
                        )
                        
                        gr.HTML("""
                        <div style="margin-top: 20px; padding: 15px; background: #f0f8ff; border-radius: 10px;">
                            <h4>üí° H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:</h4>
                            <ul>
                                <li>üìù Nh·∫≠p text ti·∫øng Vi·ªát</li>
                                <li>üé§ Upload file audio tham chi·∫øu (3-10 gi√¢y)</li>
                                <li>‚öôÔ∏è ƒêi·ªÅu ch·ªânh tham s·ªë n·∫øu c·∫ßn</li>
                                <li>üéµ Nh·∫•n "T·∫°o gi·ªçng n√≥i"</li>
                            </ul>
                        </div>
                        """)
            
            # Tab 2: Default Voice
            with gr.Tab("üé§ Gi·ªçng m·∫∑c ƒë·ªãnh", elem_id="default-voice-tab"):
                gr.HTML('<div class="section-header">üé§ Gi·ªçng n√≥i m·∫∑c ƒë·ªãnh</div>')
                
                with gr.Row():
                    with gr.Column(scale=2):
                        text_input_default = gr.Textbox(
                            label="üìù Text ti·∫øng Vi·ªát",
                            placeholder="Nh·∫≠p text ti·∫øng Vi·ªát b·∫°n mu·ªën t·ªïng h·ª£p...",
                            lines=3,
                            max_lines=5
                        )
                        
                        with gr.Row():
                            exaggeration_default = gr.Slider(
                                minimum=0.0,
                                maximum=2.0,
                                value=0.5,
                                step=0.1,
                                label="üé≠ C∆∞·ªùng ƒë·ªô c·∫£m x√∫c"
                            )
                            temperature_default = gr.Slider(
                                minimum=0.1,
                                maximum=1.0,
                                value=0.8,
                                step=0.1,
                                label="üå°Ô∏è Temperature"
                            )
                            cfg_weight_default = gr.Slider(
                                minimum=0.0,
                                maximum=1.0,
                                value=0.5,
                                step=0.1,
                                label="‚öñÔ∏è CFG Weight"
                            )
                        
                        default_btn = gr.Button(
                            "üé§ T·∫°o gi·ªçng n√≥i",
                            variant="primary",
                            size="lg"
                        )
                    
                    with gr.Column(scale=1):
                        default_output = gr.Audio(
                            label="üîä K·∫øt qu·∫£",
                            type="numpy"
                        )
                
                # Example texts
                gr.HTML('<div class="section-header">üìö V√≠ d·ª•</div>')
                example_texts = get_example_texts()

                with gr.Row():
                    for i in range(0, len(example_texts), 2):
                        with gr.Column():
                            for j in range(2):
                                if i + j < len(example_texts):
                                    example_btn = gr.Button(
                                        example_texts[i + j],
                                        size="sm"
                                    )
                                    # Use closure to capture the text
                                    def make_click_handler(text):
                                        return lambda: text
                                    example_btn.click(
                                        make_click_handler(example_texts[i + j]),
                                        outputs=text_input_default
                                    )

            # Tab 3: Batch Processing
            with gr.Tab("üì¶ X·ª≠ l√Ω h√†ng lo·∫°t", elem_id="batch-tab"):
                gr.HTML('<div class="section-header">üì¶ T·∫°o nhi·ªÅu audio c√πng l√∫c</div>')

                with gr.Row():
                    with gr.Column():
                        batch_texts = gr.Textbox(
                            label="üìù Danh s√°ch text (m·ªói d√≤ng m·ªôt c√¢u)",
                            placeholder="Nh·∫≠p nhi·ªÅu c√¢u ti·∫øng Vi·ªát, m·ªói d√≤ng m·ªôt c√¢u...",
                            lines=8,
                            max_lines=15
                        )

                        batch_reference = gr.Audio(
                            label="üé§ Audio tham chi·∫øu (t√πy ch·ªçn)",
                            type="filepath",
                            format="wav"
                        )

                        batch_btn = gr.Button(
                            "üì¶ T·∫°o t·∫•t c·∫£",
                            variant="primary",
                            size="lg"
                        )

                    with gr.Column():
                        batch_output = gr.File(
                            label="üìÅ Download ZIP file",
                            file_count="single"
                        )

                        batch_status = gr.Textbox(
                            label="üìä Tr·∫°ng th√°i",
                            interactive=False,
                            lines=5
                        )
        
        # Event handlers
        clone_btn.click(
            fn=synthesize_with_voice_clone,
            inputs=[text_input, reference_audio, exaggeration_clone, temperature_clone, cfg_weight_clone],
            outputs=clone_output
        )

        default_btn.click(
            fn=synthesize_default_voice,
            inputs=[text_input_default, exaggeration_default, temperature_default, cfg_weight_default],
            outputs=default_output
        )

        batch_btn.click(
            fn=process_batch_texts,
            inputs=[batch_texts, batch_reference],
            outputs=[batch_output, batch_status]
        )
        
        # Footer
        gr.HTML("""
        <div style="text-align: center; margin-top: 40px; padding: 20px; background: #f8f9fa; border-radius: 10px;">
            <h3>üéâ Vietnamese TTS Voice Cloning</h3>
            <p>Powered by ChatterboxTTS & Vietnamese Fine-tuned Model</p>
            <p style="color: #666;">
                üîß Model: Vietnamese TTS (1200 vocab) | 
                üéµ Voice Cloning: Reference Audio Based | 
                üöÄ Device: {device}
            </p>
        </div>
        """.format(device=device.upper()))
    
    return demo

if __name__ == "__main__":
    # Create and launch interface
    demo = create_interface()
    
    # Launch with custom settings
    demo.launch(
        server_name="0.0.0.0",  # Allow external access
        server_port=7860,
        share=True,  # Set to True for public sharing
        debug=True,
        show_error=True,
        quiet=False
    )
